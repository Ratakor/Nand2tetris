from Binon import *

# Vérification exhaustive des opérateurs de binons

# Triplettes décrivant chaque opération exhaustivement

NOM = 0
FONCTION = 1
OPÉRANDES = 2

OPS= (("NAND",nand,    (((0,0), 1),
                        ((0,1), 1),
                        ((1,0), 1),
                        ((1,1), 0))),
      ("NOT",not_,     (((0,),  1),
                        ((1,),  0))),
      ("AND",and_,     (((0,0), 0),
                        ((0,1), 0),
                        ((1,0), 0),
                        ((1,1), 1))),
      ("OR", or_,      (((0,0), 0),
                        ((0,1), 1),
                        ((1,0), 1),
                        ((1,1), 1))),
      ("XOR",xor,      (((0,0), 0),
                        ((0,1), 1),
                        ((1,0), 1),
                        ((1,1), 0))),
      ("MUX",mux,      (((0,0,0), 0),
                        ((0,0,1), 0),
                        ((0,1,0), 1),
                        ((0,1,1), 1),
                        ((1,0,0), 0),
                        ((1,0,1), 1),
                        ((1,1,0), 0),
                        ((1,1,1), 1))),
      ("DMUX",dmux,    (((0,0), (0,0)),
                        ((0,1), (1,0)),
                        ((1,0), (0,0)),
                        ((1,1), (0,1)))),
      ("DMUX4WAY",dmux4way,
                       ((((0,0),0), (0,0,0,0)),
                        (((0,0),1), (1,0,0,0)),
                        (((1,0),0), (0,0,0,0)),
                        (((1,0),1), (0,1,0,0)),
                        (((0,1),0), (0,0,0,0)),
                        (((0,1),1), (0,0,1,0)),
                        (((1,1),0), (0,0,0,0)),
                        (((1,1),1), (0,0,0,1)))),
      ("DMUX8WAY",dmux8way,
                       ((((0,0,0),0), (0,0,0,0,0,0,0,0)),
                        (((0,0,0),1), (1,0,0,0,0,0,0,0)),
                        (((1,0,0),0), (0,0,0,0,0,0,0,0)),
                        (((1,0,0),1), (0,1,0,0,0,0,0,0)),
                        (((0,1,0),0), (0,0,0,0,0,0,0,0)),
                        (((0,1,0),1), (0,0,1,0,0,0,0,0)),
                        (((1,1,0),0), (0,0,0,0,0,0,0,0)),
                        (((1,1,0),1), (0,0,0,1,0,0,0,0)),
                        (((0,0,1),0), (0,0,0,0,0,0,0,0)),
                        (((0,0,1),1), (0,0,0,0,1,0,0,0)),
                        (((1,0,1),0), (0,0,0,0,0,0,0,0)),
                        (((1,0,1),1), (0,0,0,0,0,1,0,0)),
                        (((0,1,1),0), (0,0,0,0,0,0,0,0)),
                        (((0,1,1),1), (0,0,0,0,0,0,1,0)),
                        (((1,1,1),0), (0,0,0,0,0,0,0,0)),
                        (((1,1,1),1), (0,0,0,0,0,0,0,1)))),
      ("HALFADDER",halfadder,
                       (((0,0), (0,0)),
                        ((0,1), (1,0)),
                        ((1,0), (1,0)),
                        ((1,1), (0,1)))),
      ("FULLADDER",fulladder,
                       (((0,0,0), (0,0)),
                        ((0,0,1), (1,0)),
                        ((0,1,0), (1,0)),
                        ((0,1,1), (0,1)),
                        ((1,0,0), (1,0)),
                        ((1,0,1), (0,1)),
                        ((1,1,0), (0,1)),
                        ((1,1,1), (1,1)))))

for op in OPS:
    print(op[NOM])
    for opérandes,résultat in op[OPÉRANDES]:
        r = op[FONCTION](*opérandes)
        #print(opérandes, résultat, r)
        assert r == résultat
