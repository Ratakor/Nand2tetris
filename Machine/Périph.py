from Mot import *


def chipsetIN(writeM, inM, addrM):
    sel = addrM[-2:]
    RAMwriteM0, RAMwriteM1, DISPwriteM, _ = dmux4way(sel, writeM)
    RAMwriteM = or_(RAMwriteM0, RAMwriteM1)
    return RAMwriteM, inM, addrM, DISPwriteM, inM, addrM[:-2]

def chipsetOUT(addrM, RAMoutM, DISPoutM, KBDoutM):
    sel = addrM[-2:]
    return mux4way16(sel, RAMoutM, RAMoutM, DISPoutM, KBDoutM)


###### TRICHERIE CAR EN DEHORS DU DOMAINE DE SIMULATION ######
from graphics import GraphWin
class IO():

    def __init__(self):
        self.frame = [(0,)*16]*((512//16)*256)
        self.window = GraphWin("Ã‰cran", 512, 256)
        self.window.setBackground("black")

    def probe(self, addressM):
        return self.frame[entier(addressM)]

    def set(self, writeM, inM, addressM):
        if writeM == 0:
            return
        index = entier(addressM)
        y = index // 32
        xbase = (index % 32)*16
        actuel = self.frame[index]
        self.frame[index] = inM
        for xdelta, (present, futur) in enumerate(zip(actuel, inM)):
            if futur == present:
                continue
            elif futur == 1:
                self.window.plot(xbase+xdelta, y, "white")
            else:
                self.window.plot(xbase+xdelta, y, "black")

    keys = {
        "space"     : (0,0,0,0, 0,1,0,0, 0,0,0,0, 0,0,0,0),
        "exclam"    : (1,0,0,0, 0,1,0,0, 0,0,0,0, 0,0,0,0),
        "quotedbl"  : (0,1,0,0, 0,1,0,0, 0,0,0,0, 0,0,0,0),
       #"pound"     : (1,1,0,0, 0,1,0,0, 0,0,0,0, 0,0,0,0),
        "dollar"    : (0,0,1,0, 0,1,0,0, 0,0,0,0, 0,0,0,0),
        "percent"   : (1,0,1,0, 0,1,0,0, 0,0,0,0, 0,0,0,0),
        "ampersand" : (0,1,1,0, 0,1,0,0, 0,0,0,0, 0,0,0,0),
        "quoteright": (1,1,1,0, 0,1,0,0, 0,0,0,0, 0,0,0,0),
        "parenleft" : (0,0,0,1, 0,1,0,0, 0,0,0,0, 0,0,0,0),
        "parenright": (1,0,0,1, 0,1,0,0, 0,0,0,0, 0,0,0,0),
        "asterisk"  : (0,1,0,1, 0,1,0,0, 0,0,0,0, 0,0,0,0),
        "plus"      : (1,1,0,1, 0,1,0,0, 0,0,0,0, 0,0,0,0),
        "comma"     : (0,0,1,1, 0,1,0,0, 0,0,0,0, 0,0,0,0),
        "minus"     : (1,0,1,1, 0,1,0,0, 0,0,0,0, 0,0,0,0),
        "period"    : (0,1,1,1, 0,1,0,0, 0,0,0,0, 0,0,0,0),
        "slash"     : (1,1,1,1, 0,1,0,0, 0,0,0,0, 0,0,0,0),

        "0"         : (0,0,0,0, 1,1,0,0, 0,0,0,0, 0,0,0,0),
        "1"         : (1,0,0,0, 1,1,0,0, 0,0,0,0, 0,0,0,0),
        "2"         : (0,1,0,0, 1,1,0,0, 0,0,0,0, 0,0,0,0),
        "3"         : (1,1,0,0, 1,1,0,0, 0,0,0,0, 0,0,0,0),
        "4"         : (0,0,1,0, 1,1,0,0, 0,0,0,0, 0,0,0,0),
        "5"         : (1,0,1,0, 1,1,0,0, 0,0,0,0, 0,0,0,0),
        "6"         : (0,1,1,0, 1,1,0,0, 0,0,0,0, 0,0,0,0),
        "7"         : (1,1,1,0, 1,1,0,0, 0,0,0,0, 0,0,0,0),
        "8"         : (0,0,0,1, 1,1,0,0, 0,0,0,0, 0,0,0,0),
        "9"         : (1,0,0,1, 1,1,0,0, 0,0,0,0, 0,0,0,0),

        "colon"     : (0,1,0,1, 1,1,0,0, 0,0,0,0, 0,0,0,0),
        "semicolon" : (1,1,0,1, 1,1,0,0, 0,0,0,0, 0,0,0,0),
        "less"      : (0,0,1,1, 1,1,0,0, 0,0,0,0, 0,0,0,0),
        "equal"     : (1,0,1,1, 1,1,0,0, 0,0,0,0, 0,0,0,0),
        "greater"   : (0,1,1,1, 1,1,0,0, 0,0,0,0, 0,0,0,0),
        "question"  : (1,1,1,1, 1,1,0,0, 0,0,0,0, 0,0,0,0),
        #"at"       : (0,0,0,0, 0,0,1,0, 0,0,0,0, 0,0,0,0),

        "A"         : (1,0,0,0, 0,0,1,0, 0,0,0,0, 0,0,0,0),
        "B"         : (0,1,0,0, 0,0,1,0, 0,0,0,0, 0,0,0,0),
        "C"         : (1,1,0,0, 0,0,1,0, 0,0,0,0, 0,0,0,0),
        "D"         : (0,0,1,0, 0,0,1,0, 0,0,0,0, 0,0,0,0),
        "E"         : (1,0,1,0, 0,0,1,0, 0,0,0,0, 0,0,0,0),
        "F"         : (0,1,1,0, 0,0,1,0, 0,0,0,0, 0,0,0,0),
        "G"         : (1,1,1,0, 0,0,1,0, 0,0,0,0, 0,0,0,0),
        "H"         : (0,0,0,1, 0,0,1,0, 0,0,0,0, 0,0,0,0),
        "I"         : (1,0,0,1, 0,0,1,0, 0,0,0,0, 0,0,0,0),
        "J"         : (0,1,0,1, 0,0,1,0, 0,0,0,0, 0,0,0,0),
        "K"         : (1,1,0,1, 0,0,1,0, 0,0,0,0, 0,0,0,0),
        "L"         : (0,0,1,1, 0,0,1,0, 0,0,0,0, 0,0,0,0),
        "M"         : (1,0,1,1, 0,0,1,0, 0,0,0,0, 0,0,0,0),
        "N"         : (0,1,1,1, 0,0,1,0, 0,0,0,0, 0,0,0,0),
        "O"         : (1,1,1,1, 0,0,1,0, 0,0,0,0, 0,0,0,0),
        "P"         : (0,0,0,0, 1,0,1,0, 0,0,0,0, 0,0,0,0),
        "Q"         : (1,0,0,0, 1,0,1,0, 0,0,0,0, 0,0,0,0),
        "R"         : (0,1,0,0, 1,0,1,0, 0,0,0,0, 0,0,0,0),
        "S"         : (1,1,0,0, 1,0,1,0, 0,0,0,0, 0,0,0,0),
        "T"         : (0,0,1,0, 1,0,1,0, 0,0,0,0, 0,0,0,0),
        "U"         : (1,0,1,0, 1,0,1,0, 0,0,0,0, 0,0,0,0),
        "V"         : (0,1,1,0, 1,0,1,0, 0,0,0,0, 0,0,0,0),
        "W"         : (1,1,1,0, 1,0,1,0, 0,0,0,0, 0,0,0,0),
        "X"         : (0,0,0,1, 1,0,1,0, 0,0,0,0, 0,0,0,0),
        "Y"         : (1,0,0,1, 1,0,1,0, 0,0,0,0, 0,0,0,0),
        "Z"         : (0,1,0,1, 1,0,1,0, 0,0,0,0, 0,0,0,0),

       #"bracketleft"
       #"backslash"
       #"bracketright"
       #"caret"
        "underscore": (1,1,1,1, 1,0,1,0, 0,0,0,0, 0,0,0,0),
       #"quoteleft"

        "a"         : (1,0,0,0, 0,1,1,0, 0,0,0,0, 0,0,0,0),
        "b"         : (0,1,0,0, 0,1,1,0, 0,0,0,0, 0,0,0,0),
        "c"         : (1,1,0,0, 0,1,1,0, 0,0,0,0, 0,0,0,0),
        "d"         : (0,0,1,0, 0,1,1,0, 0,0,0,0, 0,0,0,0),
        "e"         : (1,0,1,0, 0,1,1,0, 0,0,0,0, 0,0,0,0),
        "f"         : (0,1,1,0, 0,1,1,0, 0,0,0,0, 0,0,0,0),
        "g"         : (1,1,1,0, 0,1,1,0, 0,0,0,0, 0,0,0,0),
        "h"         : (0,0,0,1, 0,1,1,0, 0,0,0,0, 0,0,0,0),
        "i"         : (1,0,0,1, 0,1,1,0, 0,0,0,0, 0,0,0,0),
        "j"         : (0,1,0,1, 0,1,1,0, 0,0,0,0, 0,0,0,0),
        "k"         : (1,1,0,1, 0,1,1,0, 0,0,0,0, 0,0,0,0),
        "l"         : (0,0,1,1, 0,1,1,0, 0,0,0,0, 0,0,0,0),
        "m"         : (1,0,1,1, 0,1,1,0, 0,0,0,0, 0,0,0,0),
        "n"         : (0,1,1,1, 0,1,1,0, 0,0,0,0, 0,0,0,0),
        "o"         : (1,1,1,1, 0,1,1,0, 0,0,0,0, 0,0,0,0),
        "p"         : (0,0,0,0, 1,1,1,0, 0,0,0,0, 0,0,0,0),
        "q"         : (1,0,0,0, 1,1,1,0, 0,0,0,0, 0,0,0,0),
        "r"         : (0,1,0,0, 1,1,1,0, 0,0,0,0, 0,0,0,0),
        "s"         : (1,1,0,0, 1,1,1,0, 0,0,0,0, 0,0,0,0),
        "t"         : (0,0,1,0, 1,1,1,0, 0,0,0,0, 0,0,0,0),
        "u"         : (1,0,1,0, 1,1,1,0, 0,0,0,0, 0,0,0,0),
        "v"         : (0,1,1,0, 1,1,1,0, 0,0,0,0, 0,0,0,0),
        "w"         : (1,1,1,0, 1,1,1,0, 0,0,0,0, 0,0,0,0),
        "x"         : (0,0,0,1, 1,1,1,0, 0,0,0,0, 0,0,0,0),
        "y"         : (1,0,0,1, 1,1,1,0, 0,0,0,0, 0,0,0,0),
        "z"         : (0,1,0,1, 1,1,1,0, 0,0,0,0, 0,0,0,0),

       #"curlyleft"
       #"bar"
       #"curlyright"
       #"tilde"

        "Return"    : (0,0,0,0, 0,0,0,1, 0,0,0,0, 0,0,0,0),
        "BackSpace" : (1,0,0,0, 0,0,0,1, 0,0,0,0, 0,0,0,0),
        "Left"      : (0,1,0,0, 0,0,0,1, 0,0,0,0, 0,0,0,0),
        "Up"        : (1,1,0,0, 0,0,0,1, 0,0,0,0, 0,0,0,0),
        "Right"     : (0,0,1,0, 0,0,0,1, 0,0,0,0, 0,0,0,0),
        "Down"      : (1,0,1,0, 0,0,0,1, 0,0,0,0, 0,0,0,0),
        "Home"      : (0,1,1,0, 0,0,0,1, 0,0,0,0, 0,0,0,0),
        "End"       : (1,1,1,0, 0,0,0,1, 0,0,0,0, 0,0,0,0),
        "Prior"     : (0,0,0,1, 0,0,0,1, 0,0,0,0, 0,0,0,0),
        "Next"      : (1,0,0,1, 0,0,0,1, 0,0,0,0, 0,0,0,0),
        "Insert"    : (0,1,0,1, 0,0,0,1, 0,0,0,0, 0,0,0,0),
        "Delete"    : (1,1,0,1, 0,0,0,1, 0,0,0,0, 0,0,0,0),
        "Escape"    : (0,0,1,1, 0,0,0,1, 0,0,0,0, 0,0,0,0),
        "F1"        : (1,0,1,1, 0,0,0,1, 0,0,0,0, 0,0,0,0),
        "F2"        : (0,1,1,1, 0,0,0,1, 0,0,0,0, 0,0,0,0),
        "F3"        : (1,1,1,1, 0,0,0,1, 0,0,0,0, 0,0,0,0),
        "F4"        : (0,0,0,0, 1,0,0,1, 0,0,0,0, 0,0,0,0),
        "F5"        : (1,0,0,0, 1,0,0,1, 0,0,0,0, 0,0,0,0),
        "F6"        : (0,1,0,0, 1,0,0,1, 0,0,0,0, 0,0,0,0),
        "F7"        : (1,1,0,0, 1,0,0,1, 0,0,0,0, 0,0,0,0),
        "F8"        : (0,0,1,0, 1,0,0,1, 0,0,0,0, 0,0,0,0),
        "F9"        : (1,0,1,0, 1,0,0,1, 0,0,0,0, 0,0,0,0),
        "F10"       : (0,1,1,0, 1,0,0,1, 0,0,0,0, 0,0,0,0),
        "F11"       : (1,1,1,0, 1,0,0,1, 0,0,0,0, 0,0,0,0),
        "F12"       : (0,0,0,1, 1,0,0,1, 0,0,0,0, 0,0,0,0)
    }

    def key(self):
        key = self.window.checkKey()
        if key == "" or key not in IO.keys:
            return (0,)*16
        else:
            print(key, IO.keys[key])
            return IO.keys[key]
